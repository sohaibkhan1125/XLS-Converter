rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- ADMIN MANAGEMENT ---
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == adminId;
    }

    // --- USER PROFILES AND DOCUMENTS ---
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Rule for user's subcollection of documents
      match /documents/{docId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- USER FILES (Base64 PDFs) ---
    match /userFiles/{fileId} {
      // Users can create, read, and delete their own files.
      // We check that the userId field in the document matches the authenticated user's ID.
      // We check create against request.resource.data to validate incoming data.
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Disallow updating files to prevent tampering with metadata like uploadedAt.
      allow update: if false;
    }

    // --- SITE SETTINGS (Combined for simplicity) ---
    match /site_settings/{settingId} {
      allow read: if true;
      allow write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // --- CONVERSION LOGS ---
    match /conversion_logs/{logId} {
      allow create: if true;
      allow read: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      allow update, delete: if false;
    }

    // --- BLOG POSTS (OLD AND NEW RULES COMBINED) ---
    match /blog_posts/{postId} {
      // (OLD RULE - KEPT)
      // This rule allows reading a SINGLE post if it's published, or if the user is an admin.
      allow read: if resource.data.status == 'published' ||
        (request.auth != null &&
        exists(/databases/$(database)/documents/admins/$(request.auth.uid)));

      // (NEW RULE - THE FIX)
      // This rule allows ANYONE to get a LIST of posts from the collection.
      // This is required for the main /blogs page to work. The app's code then
      // filters this list to only show the published ones. This fixes the permission error.
      allow list: if true;

      // (OLD RULE - KEPT)
      // This rule allows ONLY admins to create, change, or delete posts.
      allow create, update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}
